#!/bin/bash

set -e

SCRIPT_PATH=$(dirname $0)
ENTRY_TY_NAME="Game"
CARGO_SUBCOMMAND="build"
unset PERIDOT_EXTERNAL_ASSET_PATH
FEATURES=()
UPDATE_DEPS=0
while [ $# -gt 0 ]; do
    case "$1" in
        "--EntryTyName" | "-e")
            ENTRY_TY_NAME=$2
            shift 2
            ;;
        "--Run" | "-r")
            CARGO_SUBCOMMAND="run"
            shift
            ;;
        "-AssetDirectory" | "-a")
            export PERIDOT_EXTERNAL_ASSET_PATH=$(realpath $2)
            FEATURES+=( "UseExternalAssetPath" )
            shift 2
            ;;
        "--Feature" | "-f")
            FEATURES+=( $2 )
            shift 2
            ;;
        "--UpdateDeps" | "-u")
            UPDATE_DEPS=1
            shift
            ;;
        *)
            if [[ ! -v USERLIB_DIRECTORY ]]; then USERLIB_DIRECTORY=$1; fi
            shift
            ;;
    esac
done
if [[ ! -v USERLIB_DIRECTORY ]]; then echo "Error: User Game Project Directory required"; exit 1; fi

. $SCRIPT_PATH/../common.sh

PACKAGE_NAME=`find_package_names $USERLIB_DIRECTORY/Cargo.toml | head -n 1`
echo -e "ðŸ›   Building Project \e[1;36m$PACKAGE_NAME\e[m for \e[33mLinux\e[m Deployment..."

USERLIB_PATH=`realpath $USERLIB_DIRECTORY`
gen_manifest $PACKAGE_NAME $USERLIB_PATH $SCRIPT_PATH/Cargo.template.toml > $SCRIPT_PATH/Cargo.toml
echo -e "//! Auto Generated by build script\n\npub use ${PACKAGE_NAME//-/_}::$ENTRY_TY_NAME as Game;" > $SCRIPT_PATH/src/userlib.rs

rsync -auz --progress $USERLIB_DIRECTORY/default-data/* $SCRIPT_PATH/data
rsync -auz --progress $SCRIPT_PATH/../../schemas/* $SCRIPT_PATH/schemas

FEATURE_STRING=($(echo "${FEATURES[@]}" | tr ' ' '\n' | sort -u | tr '\n' ','))
if [ $UPDATE_DEPS -ne 0 ]; then (cd $SCRIPT_PATH; cargo update); fi
(cd $SCRIPT_PATH; cargo $CARGO_SUBCOMMAND --features $FEATURE_STRING --target x86_64-unknown-linux-gnu) || exit $?
