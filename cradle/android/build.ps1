param(
    [parameter(Mandatory=$true, HelpMessage="User Game Project Directory")][String]$UserlibDirectory,
    [parameter(HelpMessage="An structure name of entry point of the game")][String]$EntryTyName = "Game",
    [switch]$Run = $false,
    [parameter(Mandatory=$true, HelpMessage="Asset Directory")][String]$AssetDirectory,
    [parameter(Mandatory=$true, HelpMessage="Package Bundle ID")][String]$AppPackageID,
    [parameter(HelpMessage="Additional Rust Features")][String[]]$Features = @(),
    [parameter(HelpMessage="Update Cargo dependencies")][switch]$UpdateDeps = $false
)

$ErrorActionPreference = "Stop"
$ScriptPath = Split-Path -Parent $MyInvocation.MyCommand.Path

function SkipUntil([scriptblock]$pred = $(throw "Need a predicate")) {
    begin {
        $skip = $false
    }
    process {
        if (-not $skip) {
            $skip = & $pred $_
        }

        if ($skip) {
            $_
        }
    }
    end {}
}
function TakeWhile([scriptblock]$pred = $(throw "Need a predicate")) {
    begin {
        $take = $true
    }
    process {
        if ($take) {
            $take = & $pred $_
        }

        if ($take) { $_ }
    }
    end {}
}
function ParseProjectCrateName([String]$ProjectRoot) {
    $FileContent = (Get-Content $ProjectRoot/Cargo.toml) -split "\n"
    while ($true) {
        $FileContent = $FileContent | SkipUntil { $_.toLower() -eq "[package]" } | Select-Object -Skip 1
        if ($FileContent.count -le 0) { break; }
        $PackageContent = $FileContent | TakeWhile { !$_.startsWith("[") } |
            ForEach-Object { $_ -split "=" | ForEach-Object { New-Object string -ArgumentList $_.trim() } }
        $PackageNameHeader = ($PackageContent | SkipUntil { $_.toLower() -ne "name" })
        if ($PackageNameHeader.count -le 0) { continue; }
        return $PackageNameHeader[0].Trim('"')
    }
    throw "No package name found."
}
function BuildCargoManifestFromTemplate([String]$PackageName) {
    $template = Get-Content $ScriptPath\Cargo.template.toml
    $template = $template.Replace("#%KERNEL_CRATE_NAME%", $PackageName)
    $template = $template.Replace("%KERNEL_CRATE_PATH%", (Resolve-Path $UserlibDirectory).Path.Replace("\", "/"))
    $template | Out-File $ScriptPath\Cargo.toml -Encoding UTF8
}

$PackageName = ParseProjectCrateName($UserlibDirectory)
Write-Host -ForegroundColor White -NoNewLine ">"
Write-Host -ForegroundColor Gray -NoNewLine ">"
Write-Host -ForegroundColor DarkGray -NoNewLine ">"
Write-Host -NoNewLine " Building Project "
Write-Host -ForegroundColor Cyan -NoNewLine $PackageName
Write-Host -NoNewLine " for "
Write-Host -ForegroundColor Yellow -NoNewLine "Android"
Write-Host " Deployment..."
BuildCargoManifestFromTemplate $PackageName

$ExternCrateName = $PackageName.Replace("-", "_")
"//! Auto Generated by build script

pub use $ExternCrateName::$EntryTyName as Game;" | Out-File $ScriptPath\src\userlib.rs -Encoding UTF8

# Rewrite Android Files...
$template = Get-Content $ScriptPath\apkbuild\app\build-template.gradle
$template = $template.Replace("**APKAPPID**", "'$AppPackageID'")
$template = $template.Replace("**ASSETDIR**", "$((Resolve-Path $AssetDirectory).Path.Replace("\", "\\"))")
$template | Set-Content $ScriptPath\apkbuild\app\build.gradle

$template = Get-Content $ScriptPath\apkbuild\app\src\main\AndroidManifest-template.xml
$template = $template.Replace("**APKAPPID**", "$AppPackageID")
$template | Set-Content $ScriptPath\apkbuild\app\src\main\AndroidManifest.xml -Encoding UTF8

# Make Default Structure then mirrors the user-defined structure, results an user-customizable resource structure
robocopy $ScriptPath\apkbuild\app\src\main\res-default $ScriptPath\apkbuild\app\src\main\res /MIR
if (Test-Path $UserlibDirectory\android-res) {
    robocopy $UserlibDirectory\android-res $ScriptPath\apkbuild\app\src\main\res /IS /E
}

# mirror extlib
if (Test-Path $UserlibDirectory\extlib\android) {
    robocopy $UserlibDirectory\extlib\android $ScriptPath\apkbuild\app\src\main\jniLibs /MIR /XF .*
}

# Build Userlib
$ActiveFeatures = @("bedrock/VK_EXT_debug_report","bedrock/VK_KHR_android_surface","bedrock/DynamicLoaded") + $Features
try {
    Push-Location; Set-Location $ScriptPath
    if ($UpdateDeps) { cargo update }
    cargo ndk --target aarch64-linux-android --android-platform $Env:NDK_PLATFORM_TARGET -- build --features $($ActiveFeatures -join ",")
    if ($LASTEXITCODE -ne 0) { throw """cargo build"" failed with code $LASTEXITCODE" }
}
finally {
    Pop-Location
}

New-Item -ItemType Directory $ScriptPath\apkbuild\app\src\main\jniLibs\arm64-v8a -ErrorAction SilentlyContinue | Out-Null
Move-Item -Force $ScriptPath/target/aarch64-linux-android/debug/libpegamelib.so $ScriptPath/apkbuild/app/src/main/jniLibs/arm64-v8a/

Write-Host "Building APK file..."
try {
    Push-Location; Set-Location $ScriptPath/apkbuild
    ./gradlew assembleDebug
    if ($LASTEXITCODE -ne 0) { throw """./gradlew assembleDebug"" failed with code $LASTEXITCODE" }
}
finally { Pop-Location }

function RunADB([parameter(ValueFromRemainingArguments=$true)]$args) {
    & "$Env:ANDROID_HOME\platform-tools\adb" @args
}

if ($Run) {
    # Run on Android (require to connection)
    try {
        Push-Location
        Set-Location $ScriptPath/apkbuild
        RunADB uninstall $AppPackageID
        RunADB install app/build/outputs/apk/debug/app-debug.apk
        RunADB shell am start -n $AppPackageID/jp.ct2.peridot.NativeActivity
    }
    finally { Pop-Location }
}
