jobs:
  "check-baselayer":
    name: Base Layer
    needs:
    - preconditions
    "runs-on": "ubuntu-latest"
    steps:
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: "Checking out (HEAD commit)"
      uses: "actions/checkout@v2"
      with:
        ref: "${{ github.event.pull_request.head.sha }}"
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: Checking out
      uses: "actions/checkout@v2"
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: Initialize Cache
      uses: "actions/cache@v2"
      with:
        key: "${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}"
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: Building as Checking
      uses: "./.github/actions/checkbuild-baselayer"
    - env:
        AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
        AWS_DEFAULT_REGION: "ap-northeast-1"
        AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_ACCESS_SECRET }}"
      if: "failure()"
      name: Notify as Failure
      uses: "Pctg-x8/ci-notifications-post-invoker@master"
      with:
        base_sha: "${{ github.event.pull_request.base.sha }}"
        begintime: "${{ needs.preconditions.outputs.begintime }}"
        failure_step: "check-baselayer"
        head_sha: "${{ github.event.pull_request.head.sha }}"
        mode: diff
        pr_number: "${{ github.event.number }}"
        pr_title: "${{ github.event.pull_request.title }}"
        report_name: PR Integrity Check
        status: failure
  "check-cradle-macos":
    name: "Cradle(macOS)"
    needs:
    - preconditions
    - "check-baselayer"
    "runs-on": "macos-latest"
    steps:
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: "Checking out (HEAD commit)"
      uses: "actions/checkout@v2"
      with:
        ref: "${{ github.event.pull_request.head.sha }}"
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: Checking out
      uses: "actions/checkout@v2"
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: Initialize Cache
      uses: "actions/cache@v2"
      with:
        key: "${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}"
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: install requirements
      run: brew install coreutils
    - env:
        VK_SDK_PATH: ''
      if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: cargo check
      run: "./build.sh mac examples/basic --RunChecks 2>&1 | tee $GITHUB_WORKSPACE/.buildlog"
    - env:
        AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
        AWS_DEFAULT_REGION: "ap-northeast-1"
        AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_ACCESS_SECRET }}"
      if: "failure()"
      name: Notify as Failure
      uses: "Pctg-x8/ci-notifications-post-invoker@master"
      with:
        base_sha: "${{ github.event.pull_request.base.sha }}"
        begintime: "${{ needs.preconditions.outputs.begintime }}"
        failure_step: "check-cradle-macos"
        head_sha: "${{ github.event.pull_request.head.sha }}"
        mode: diff
        pr_number: "${{ github.event.number }}"
        pr_title: "${{ github.event.pull_request.title }}"
        report_name: PR Integrity Check
        status: failure
  "check-cradle-windows":
    name: "Cradle(Windows)"
    needs:
    - preconditions
    - "check-baselayer"
    "runs-on": "windows-latest"
    steps:
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: "Checking out (HEAD commit)"
      uses: "actions/checkout@v2"
      with:
        ref: "${{ github.event.pull_request.head.sha }}"
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: Checking out
      uses: "actions/checkout@v2"
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: Initialize Cache
      uses: "actions/cache@v2"
      with:
        key: "${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}"
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
    - env:
        VK_SDK_PATH: ''
      if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: cargo check
      run: "./build.ps1 windows examples/basic -RunTests -Features bedrock/DynamicLoaded 2>&1 | Tee-Object $Env:GITHUB_WORKSPACE/.buildlog"
    - env:
        VK_SDK_PATH: ''
      if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: "cargo check for transparent-back"
      run: |
            ./build.ps1 windows examples/basic -RunTests -Features "transparent,bedrock/DynamicLoaded" 2>&1 | Tee-Object $Env:GITHUB_WORKSPACE/.buildlog
    - env:
        AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
        AWS_DEFAULT_REGION: "ap-northeast-1"
        AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_ACCESS_SECRET }}"
      if: "failure()"
      name: Notify as Failure
      uses: "Pctg-x8/ci-notifications-post-invoker@master"
      with:
        base_sha: "${{ github.event.pull_request.base.sha }}"
        begintime: "${{ needs.preconditions.outputs.begintime }}"
        failure_step: "check-cradle-windows"
        head_sha: "${{ github.event.pull_request.head.sha }}"
        mode: diff
        pr_number: "${{ github.event.number }}"
        pr_title: "${{ github.event.pull_request.title }}"
        report_name: PR Integrity Check
        status: failure
  "check-examples":
    name: Examples
    needs:
    - preconditions
    - "check-modules"
    "runs-on": "ubuntu-latest"
    steps:
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: "Checking out (HEAD commit)"
      uses: "actions/checkout@v2"
      with:
        ref: "${{ github.event.pull_request.head.sha }}"
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: Checking out
      uses: "actions/checkout@v2"
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: Initialize Cache
      uses: "actions/cache@v2"
      with:
        key: "${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}"
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: Building as Checking
      uses: "./.github/actions/checkbuild-subdir"
      with:
        path: examples
    - env:
        AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
        AWS_DEFAULT_REGION: "ap-northeast-1"
        AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_ACCESS_SECRET }}"
      if: "failure()"
      name: Notify as Failure
      uses: "Pctg-x8/ci-notifications-post-invoker@master"
      with:
        base_sha: "${{ github.event.pull_request.base.sha }}"
        begintime: "${{ needs.preconditions.outputs.begintime }}"
        failure_step: "check-examples"
        head_sha: "${{ github.event.pull_request.head.sha }}"
        mode: diff
        pr_number: "${{ github.event.number }}"
        pr_title: "${{ github.event.pull_request.title }}"
        report_name: PR Integrity Check
        status: failure
  "check-formats":
    name: Code Formats
    needs:
    - preconditions
    "runs-on": "ubuntu-latest"
    steps:
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: "Checking out (HEAD commit)"
      uses: "actions/checkout@v2"
      with:
        ref: "${{ github.event.pull_request.head.sha }}"
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: Checking out
      uses: "actions/checkout@v2"
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: "Running Check: Line Width"
      uses: "./.github/actions/codeform-checker"
      with:
        script: codeform_check
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: "Running Check: Debugging Weaks"
      uses: "./.github/actions/codeform-checker"
      with:
        script: vulnerabilities_elliminator
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: "Running Check: Trailing Newline for Source Code Files"
      uses: "./.github/actions/codeform-checker"
      with:
        script: trailing_newline_checker
    - env:
        AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
        AWS_DEFAULT_REGION: "ap-northeast-1"
        AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_ACCESS_SECRET }}"
      if: "failure()"
      name: Notify as Failure
      uses: "Pctg-x8/ci-notifications-post-invoker@master"
      with:
        base_sha: "${{ github.event.pull_request.base.sha }}"
        begintime: "${{ needs.preconditions.outputs.begintime }}"
        failure_step: "check-formats"
        head_sha: "${{ github.event.pull_request.head.sha }}"
        mode: diff
        pr_number: "${{ github.event.number }}"
        pr_title: "${{ github.event.pull_request.title }}"
        report_name: PR Integrity Check
        status: failure
  "check-modules":
    name: Modules
    needs:
    - preconditions
    - "check-baselayer"
    "runs-on": "ubuntu-latest"
    steps:
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: "Checking out (HEAD commit)"
      uses: "actions/checkout@v2"
      with:
        ref: "${{ github.event.pull_request.head.sha }}"
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: Checking out
      uses: "actions/checkout@v2"
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: Initialize Cache
      uses: "actions/cache@v2"
      with:
        key: "${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}"
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: Building as Checking
      uses: "./.github/actions/checkbuild-subdir"
      with:
        path: '.'
    - env:
        AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
        AWS_DEFAULT_REGION: "ap-northeast-1"
        AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_ACCESS_SECRET }}"
      if: "failure()"
      name: Notify as Failure
      uses: "Pctg-x8/ci-notifications-post-invoker@master"
      with:
        base_sha: "${{ github.event.pull_request.base.sha }}"
        begintime: "${{ needs.preconditions.outputs.begintime }}"
        failure_step: "check-modules"
        head_sha: "${{ github.event.pull_request.head.sha }}"
        mode: diff
        pr_number: "${{ github.event.number }}"
        pr_title: "${{ github.event.pull_request.title }}"
        report_name: PR Integrity Check
        status: failure
  "check-sync-workflow":
    name: Check Workflow Files are Synchronized
    needs:
    - preconditions
    "runs-on": "ubuntu-latest"
    steps:
    - if: "${{ needs.preconditions.outputs.has_workflow_changes == 1 }}"
      name: "Checking out (HEAD commit)"
      uses: "actions/checkout@v2"
      with:
        ref: "${{ github.event.pull_request.head.sha }}"
    - if: "${{ needs.preconditions.outputs.has_workflow_changes == 1 }}"
      name: Checking out
      uses: "actions/checkout@v2"
    - if: "${{ needs.preconditions.outputs.has_workflow_changes == 1 }}"
      name: Setup Dhall
      run: |
        QUERY_STRING='query($cursor: String) { repository(owner: \"dhall-lang\", name: \"dhall-haskell\") { releases(first: 1, orderBy: { direction: DESC, field: CREATED_AT }) { nodes { releaseAssets(first: 10, after: $cursor) { nodes { name, downloadUrl }, pageInfo { hasNextPage, endCursor } } } } } }'
        QUERY_CURSOR='null'
        TARGET_FILE=""
        while :; do
          POSTDATA="{ \"query\": \"$QUERY_STRING\", \"variables\": { \"cursor\": $QUERY_CURSOR } }"
          API_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -X POST -d "$POSTDATA" https://api.github.com/graphql)
          TARGET_FILE=$(echo $API_RESPONSE | jq -r '.data.repository.releases.nodes[0].releaseAssets.nodes[] | select(.name | startswith("dhall-yaml") and contains("-linux")).downloadUrl')
          if [[ $TARGET_FILE != "" ]]; then break; fi
          HAS_NEXT_PAGE=$(echo $API_RESPONSE | jq ".data.repository.releases.nodes[0].releaseAssets.pageInfo.hasNextPage")
          if [[ "$HAS_NEXT_PAGE" == "true" ]]; then
            QUERY_CURSOR=$(echo $API_RESPONSE | jq ".data.repository.releases.nodes[0].releaseAssets.pageINfo.endCursor")
          else
            echo "Latest dhall release does not contains dhall-yaml for linux platform!"
            exit 1
          fi
        done < <(cat)
        echo "$TARGET_FILE"
        mkdir $HOME/dhall
        curl -L $TARGET_FILE | tar x --bzip2 -C $HOME/dhall
        echo "$HOME/dhall/bin" >> $GITHUB_PATH
        sudo apt-get update
        sudo apt-get install -y colordiff
    - if: "${{ needs.preconditions.outputs.has_workflow_changes == 1 }}"
      name: "test-sync"
      run: "make -C ./.github/workflows test-sync"
    - env:
        AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
        AWS_DEFAULT_REGION: "ap-northeast-1"
        AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_ACCESS_SECRET }}"
      if: "failure()"
      name: Notify as Failure
      uses: "Pctg-x8/ci-notifications-post-invoker@master"
      with:
        base_sha: "${{ github.event.pull_request.base.sha }}"
        begintime: "${{ needs.preconditions.outputs.begintime }}"
        failure_step: "check-sync-workflow"
        head_sha: "${{ github.event.pull_request.head.sha }}"
        mode: diff
        pr_number: "${{ github.event.number }}"
        pr_title: "${{ github.event.pull_request.title }}"
        report_name: PR Integrity Check
        status: failure
  "check-tools":
    name: Tools
    needs:
    - preconditions
    - "check-baselayer"
    "runs-on": "ubuntu-latest"
    steps:
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: "Checking out (HEAD commit)"
      uses: "actions/checkout@v2"
      with:
        ref: "${{ github.event.pull_request.head.sha }}"
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: Checking out
      uses: "actions/checkout@v2"
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: Initialize Cache
      uses: "actions/cache@v2"
      with:
        key: "${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}"
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
    - if: "${{ needs.preconditions.outputs.has_code_changes == 1 }}"
      name: Building as Checking
      uses: "./.github/actions/checkbuild-subdir"
      with:
        path: tools
    - env:
        AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
        AWS_DEFAULT_REGION: "ap-northeast-1"
        AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_ACCESS_SECRET }}"
      if: "failure()"
      name: Notify as Failure
      uses: "Pctg-x8/ci-notifications-post-invoker@master"
      with:
        base_sha: "${{ github.event.pull_request.base.sha }}"
        begintime: "${{ needs.preconditions.outputs.begintime }}"
        failure_step: "check-tools"
        head_sha: "${{ github.event.pull_request.head.sha }}"
        mode: diff
        pr_number: "${{ github.event.number }}"
        pr_title: "${{ github.event.pull_request.title }}"
        report_name: PR Integrity Check
        status: failure
  preconditions:
    name: Preconditions
    outputs:
      begintime: "${{ steps.begintime.outputs.begintime }}"
      has_code_changes: "${{ steps.fileck.outputs.has_code_changes }}"
      has_workflow_changes: "${{ steps.fileck.outputs.has_workflow_changes }}"
    "runs-on": "ubuntu-latest"
    steps:
    - id: begintime
      name: Getting begintime
      run: "echo \"::set-output name=begintime::$(date +%s)\""
    - id: fileck
      name: Checking Changed Filenames
      run: |
        HAS_CODE_CHANGES=0
        HAS_WORKFLOW_CHANGES=0
        QUERY_STRING='query($cursor: String) { repository(owner: \"${{ github.event.repository.owner.login }}\", name: \"${{ github.event.repository.name }}\") { pullRequest(number: ${{ github.event.number }}) { files(first: 50, after: $cursor) { nodes { path }, pageInfo { hasNextPage, endCursor } } } } }'
        QUERY_CURSOR='null'
        while :; do
          POSTDATA="{ \"query\": \"$QUERY_STRING\", \"variables\": { \"cursor\": $QUERY_CURSOR }\" } }"
          echo $POSTDATA
          API_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -X POST -d "$POSTDATA" https://api.github.com/graphql)
          echo $API_RESPONSE
          PATHS=$(echo $API_RESPONSE | jq ".data.repository.pullRequest.files.nodes[].path")
          echo $PATHS
          echo $PATHS | grep -qE '\.rs"|Cargo(\.template)?\.toml"' && :
          if [[ $? == 0 ]]; then HAS_CODE_CHANGES=1; fi
          echo $PATHS | grep -qE '\.dhall"' && :
          if [[ $? == 0 ]]; then HAS_WORKFLOW_CHANGES=1; fi
          if [[ $HAS_CODE_CHANGES == 1 && $HAS_WORKFLOW_CHANGES == 1 ]]; then break; fi
          HAS_NEXT_PAGE=$(echo $API_RESPONSE | jq ".data.repository.pullRequest.files.pageInfo.hasNextPage")
          if [[ "$HAS_NEXT_PAGE" == "true" ]]; then
            QUERY_CURSOR=$(echo $API_RESPONSE | jq ".data.repository.pullRequest.files.pageInfo.endCursor")
          else
            break
          fi
        done < <(cat)
        echo "HAS_CODE_CHANGES?$HAS_CODE_CHANGES"
        echo "HAS_WORKFLOW_CHANGES?$HAS_WORKFLOW_CHANGES"
        echo "::set-output name=has_code_changes::$HAS_CODE_CHANGES"
        echo "::set-output name=has_workflow_changes::$HAS_WORKFLOW_CHANGES"
  "report-success":
    name: Report as Success
    needs:
    - preconditions
    - "check-examples"
    - "check-formats"
    - "check-sync-workflow"
    - "check-cradle-windows"
    - "check-cradle-macos"
    "runs-on": "ubuntu-latest"
    steps:
    - name: "Checking out (HEAD commit)"
      uses: "actions/checkout@v2"
      with:
        ref: "${{ github.event.pull_request.head.sha }}"
    - name: Checking out
      uses: "actions/checkout@v2"
    - env:
        AWS_ACCESS_KEY_ID: "${{ secrets.AWS_ACCESS_KEY_ID }}"
        AWS_DEFAULT_REGION: "ap-northeast-1"
        AWS_SECRET_ACCESS_KEY: "${{ secrets.AWS_ACCESS_SECRET }}"
      name: Notify as Success
      uses: "Pctg-x8/ci-notifications-post-invoker@master"
      with:
        base_sha: "${{ github.event.pull_request.base.sha }}"
        begintime: "${{ needs.preconditions.outputs.begintime }}"
        head_sha: "${{ github.event.pull_request.head.sha }}"
        mode: diff
        pr_number: "${{ github.event.number }}"
        pr_title: "${{ github.event.pull_request.title }}"
        report_name: PR Integrity Check
        status: success
name: Integrity Check
'on':
  pull_request:
    types:
    - opened
    - synchronize
